openapi: 3.1.0
info:
  title: SEHATI API
  version: 1.0.0
  description: API ini merupakan project capstone dari Coding Camp powered by DBS faundation yang bertujuan untuk sistem konsultasi awal soal mental helt.
  contact:
    name: Ary Kurnia
    email: aryk922@gmail.com
servers:
  - url: http://localhost:3000
    description: Local Server
  - url: https://sehati-api.arykurnia.my.id
    description: Production Server
paths:
  /:
    get:
      tags:
        - Welcome
      summary: Welcome to the API
      description: Anda bisa menggunakan methhod ini untuk melakukan conection test.
      responses:
        '200':
          description: Welcome to the API
          content:
            application/json:
              example:
                statusCode: 200
                error: false
                message: Welcome to the SEHATI API
  /register:
    post:
      tags:
        - Auth
      summary: Register user
      description: Anda bisa menggunakan methhod ini untuk melakukan register user baru.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - gender
                - birth
                - email
                - password
              properties:
                name:
                  $ref: '#/components/schemas/user/properties/name'
                gender:
                  $ref: '#/components/schemas/user/properties/gender'
                birth:
                  $ref: '#/components/schemas/user/properties/birth'
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - gender
                - birth
                - email
                - password
              properties:
                name:
                  $ref: '#/components/schemas/user/properties/name'
                gender:
                  $ref: '#/components/schemas/user/properties/gender'
                birth:
                  $ref: '#/components/schemas/user/properties/birth'
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
      responses:
        '201':
          description: Register user
          content:
            application/json:
              example:
                statusCode: 201
                error: false
                message: user created
                data:
                  userId: oawxGXDAdU
                  name: Budi Ari
                  email: budi@gmail
        '409':
          description: Email already exist
          content:
            application/json:
              example:
                statusCode: 409
                error: Conflict
                message: Email sudah terdaftar. Silakan gunakan email lain.
        '400':
          description: Data validasi tidak sesuai.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Gunakan methhod ini untuk melakukan login user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
      responses:
        '200':
          description: Register user
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    type: object                    
                    properties:
                      userId:
                        $ref: '#/components/schemas/user/properties/userId'
                      name:
                        $ref: '#/components/schemas/user/properties/name'
                      email:
                        $ref: '#/components/schemas/user/properties/email'
                      accessToken:
                        type: string
                        format: JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Invalid email or password
          content:
            application/json:
              example:
                statusCode: 400
                error: true
                message: invalid email or password
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user info
      description: Gunakan methhod ini untuk melakukan get user.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID pengguna yang ingin diambil informasinya
          schema:
            type: string
      responses:
        '200':
          description: Get user
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                      type: object
                      properties:
                        userId:
                          $ref: '#/components/schemas/user/properties/userId'
                        name:
                          $ref: '#/components/schemas/user/properties/name'
                        gender:
                          $ref: '#/components/schemas/user/properties/gender'
                        birth:
                          $ref: '#/components/schemas/user/properties/birth'
                        email:
                          $ref: '#/components/schemas/user/properties/email'
                        createdAt:
                          $ref: '#/components/schemas/user/properties/createdAt'
                        updatedAt:
                          $ref: '#/components/schemas/user/properties/updatedAt'
        '403':
          description: Unauthorized
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: You are not allowed to access this resource
        '404':
          description: User not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: user not found
    put:
      tags:
        - User
      summary: Update user
      description: Gunakan methhod ini untuk melakukan update user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID pengguna yang ingin diupdate
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/user/properties/name'
                gender:
                  $ref: '#/components/schemas/user/properties/gender'
                birth:
                  $ref: '#/components/schemas/user/properties/birth'
                email:
                  $ref: '#/components/schemas/user/properties/email'
      responses:
        '200':
          description: Update user
          content:
            application/json:
              example:
                statusCode: 200
                error: false
                message: user updated
        '404':
          description: User not found'
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: user not found
  /assessments:
    post:
      tags:
        - Assessment
      summary: Create assessment
      description: Gunakan methhod ini untuk melakukan create assessment.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assessment/properties/assessment'

      responses:
        '200':
          description: Create assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        $ref: '#/components/schemas/assessment/properties/id'
                      userId:
                        $ref: '#/components/schemas/assessment/properties/userId'
                      assessment:
                        $ref: '#/components/schemas/assessment/properties/assessment'
                      hasil:
                        $ref: '#/components/schemas/assessment/properties/hasil'
                      news:
                        $ref: '#/components/schemas/news'
                      createdAt:
                        $ref: '#/components/schemas/assessment/properties/createdAt'
        '404':
          description: not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: not found
  /assessments/{assessmentId}:
    get:
      tags:
        - Assessment
      summary: Get assessment
      description: Gunakan methhod ini untuk melakukan get assessment.
      security:
        - bearerAuth: []
      parameters:
        - name: assessmentId
          in: path
          required: true
          description: ID assessment yang ingin diambil informasinya
          schema:
            type: string
      responses:
        '200':
          description: Get assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/assessment'
  /news:
    get:
      tags:
        - News
      summary: Get news
      description: Gunakan methhod ini untuk melakukan get berita.
      responses:
        '200':
          description: Get news
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/news'
        '404':
          description: not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: not found
  /history/{userId}:
    get:
      tags:
        - Riwayat
      summary: Get riwayat
      parameters:
        - name: userId
          in: path
          required: true
          description: userId yang ingin diambil informasinya
          schema:
            type: string
      description: Gunakan methhod ini untuk melakukan get riwayat.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get riwayat
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/assessment/properties/id'
                        userId:
                          $ref: '#/components/schemas/assessment/properties/userId'
                        hasil:
                          type: object
                          properties:
                            depresi:
                              $ref: '#/components/schemas/assessment/properties/hasil/properties/depresi'
                            kecemasan:
                              $ref: '#/components/schemas/assessment/properties/hasil/properties/kecemasan'
                            stres:
                              $ref: '#/components/schemas/assessment/properties/hasil/properties/stres'
                            rataRata:
                              $ref: '#/components/schemas/assessment/properties/hasil/properties/rataRata'
                            predictedLabel:
                              $ref: '#/components/schemas/assessment/properties/hasil/properties/predictedLabel'
                        createdAt:
                          $ref: '#/components/schemas/assessment/properties/createdAt'
                        
        '404':
          description: not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: not found

components:
  schemas:
    user:
      type: object
      properties:
        userId:
          type: string
          example: yj5pc_LARC_AgK61
        name:
          type: string
          minLength: 2
          maxLength: 25
          example: Budi Ari
        gender:
          type: string
          enum:
            - male
            - female
          example: male
        birth:
          type: string
          format: date
          example: 2003-01-05
        email:
          type: string
          format: email
          example: qhY4o@example.com
        password:
          type: string
          minLength: 6
          maxLength: 15
          format: password
          example: password123
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
    assessment:
      type: object
      properties:
        id:
          type: string
          example: yj5pc_LARC_AgK61
        userId:
          type: string
          example: bwyec_LARC_AgK61
        assessment:
          type: object
          properties:
            D:
              type: array
              minItems: 7
              maxItems: 7
              items:
                type: number
                minimum: 0
                maximum: 3
              example: [3, 3, 3, 3, 1, 0, 1]
            A:
              type: array
              minItems: 7
              maxItems: 7
              items:
                type: number
                minimum: 0
                maximum: 3
              example: [1, 0, 2, 1, 1, 2, 0]
            S:
              type: array
              minItems: 7
              maxItems: 7
              items:
                type: number
                minimum: 0
                maximum: 3
              example: [3, 3, 3, 3, 1, 0, 1]
            keluhanTambahan:
              type: string
              example: "Saya merasa sulit akhir-akhir ini dan sering cemas tentang pekerjaan saya"
        hasil:
          type: object
          properties:
            depresi:
              type: object
              properties:
                categorie:
                  type: string
                  example: "Sangat berat"
                score:
                  type: number
                  minimum: 0
                  maximum: 100
                  example: 80
            kecemasan:
              type: object
              properties:
                categorie:
                  type: string
                  example: "Sedang"
                score:
                  type: number
                  minimum: 0
                  maximum: 100
                  example: 60
            stres:
              type: object
              properties:
                categorie:
                  type: string
                  example: "Sedang"
                score:
                  type: number
                  minimum: 0
                  maximum: 100
                  example: 60
            rataRata:
              type: object
              properties:
                categorie:
                  type: string
                  example: "Sedang"
                score:
                  type: number
                  minimum: 0
                  maximum: 100
                  example: 60
            predictedLabel:
              type: string
              example: "anxiety"
            rekomendasi:
              type: string
              example: "Mengambil istirahat dan minum obat"
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
    news:
      type: object
      properties:
        source:
          type: object
          properties:
            id:
              type: string
              example: "nbc-news"
            name:
              type: string
              example: "NBC News"
        author:
          type: string
          example: "John Doe"
        title:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
        description:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        url:
          type: string
          format: url
          example: "https://www.example.com/news/lorem-ipsum"
        urlToImage:
          type: string
          format: url
          example: "https://www.example.com/images/lorem-ipsum.jpg"
        publishedAt:
          type: string
          format: timestamp
          example: "2025-06-01T04:05:00Z"
        content:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
    validationError:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: "Data validasi tidak sesuai."
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "name"
              message:
                type: string
                example: "Nama tidak boleh kosong."
