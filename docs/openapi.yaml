openapi: 3.1.0
info:
  title: SEHATI API
  version: 1.0.0
  description: API ini merupakan project capstone dari Coding Camp powered by DBS faundation yang bertujuan untuk sistem konsultasi awal soal mental helt.
  contact:
    name: Ary Kurnia
    email: aryk922@gmail.com
servers:
  - url: http://localhost:3000
    description: Local Server
  - url: https://sehati-api.arykurnia.my.id/v1/
    description: Production Server
paths:
  /:
    get:
      tags:
        - Welcome
      summary: Welcome to the API
      description: Anda bisa menggunakan methhod ini untuk melakukan conection test.
      responses:
        '200':
          description: Welcome to the API
          content:
            application/json:
              example:
                statusCode: 200
                error: false
                message: Welcome to the SEHATI API
  /register:
    post:
      tags:
        - Auth
      summary: Register user
      description: Anda bisa menggunakan methhod ini untuk melakukan register user baru.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - gender
                - birth
                - email
                - password
              properties:
                name:
                  $ref: '#/components/schemas/user/properties/name'
                gender:
                  $ref: '#/components/schemas/user/properties/gender'
                birth:
                  $ref: '#/components/schemas/user/properties/birth'
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - gender
                - birth
                - email
                - password
              properties:
                name:
                  $ref: '#/components/schemas/user/properties/name'
                gender:
                  $ref: '#/components/schemas/user/properties/gender'
                birth:
                  $ref: '#/components/schemas/user/properties/birth'
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
      responses:
        '201':
          description: Register user
          content:
            application/json:
              example:
                statusCode: 201
                error: false
                message: user created
                data:
                  userId: oawxGXDAdU
                  name: Budi Ari
                  email: budi@gmail
        '409':
          description: Email already exist
          content:
            application/json:
              example:
                statusCode: 409
                error: Conflict
                message: Email sudah terdaftar. Silakan gunakan email lain.
        '400':
          description: Data validasi tidak sesuai.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Gunakan methhod ini untuk melakukan login user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
          multipart/form-data:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  $ref: '#/components/schemas/user/properties/email'
                password:
                  $ref: '#/components/schemas/user/properties/password'
      responses:
        '200':
          description: Register user
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    type: object                    
                    properties:
                      userId:
                        $ref: '#/components/schemas/user/properties/userId'
                      name:
                        $ref: '#/components/schemas/user/properties/name'
                      email:
                        $ref: '#/components/schemas/user/properties/email'
                      accessToken:
                        type: string
                        format: JWT
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Invalid email or password
          content:
            application/json:
              example:
                statusCode: 400
                error: true
                message: invalid email or password
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user info
      description: Gunakan methhod ini untuk melakukan get user.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID pengguna yang ingin diambil informasinya
          schema:
            type: string
      responses:
        '200':
          description: Get user
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                      type: object
                      properties:
                        userId:
                          $ref: '#/components/schemas/user/properties/userId'
                        name:
                          $ref: '#/components/schemas/user/properties/name'
                        gender:
                          $ref: '#/components/schemas/user/properties/gender'
                        birth:
                          $ref: '#/components/schemas/user/properties/birth'
                        email:
                          $ref: '#/components/schemas/user/properties/email'
                        createdAt:
                          $ref: '#/components/schemas/user/properties/createdAt'
                        updatedAt:
                          $ref: '#/components/schemas/user/properties/updatedAt'
        '403':
          description: Unauthorized
          content:
            application/json:
              example:
                statusCode: 403
                error: Forbidden
                message: You are not allowed to access this resource
        '404':
          description: User not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: user not found
    put:
      tags:
        - User
      summary: Update user
      description: Gunakan methhod ini untuk melakukan update user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID pengguna yang ingin diupdate
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/user/properties/name'
                gender:
                  $ref: '#/components/schemas/user/properties/gender'
                birth:
                  $ref: '#/components/schemas/user/properties/birth'
                email:
                  $ref: '#/components/schemas/user/properties/email'
      responses:
        '200':
          description: Update user
          content:
            application/json:
              example:
                statusCode: 200
                error: false
                message: user updated
        '404':
          description: User not found'
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: user not found
  /assessment:
    post:
      tags:
        - Assessment
      summary: Create assessment
      description: Gunakan methhod ini untuk melakukan create assessment.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - perasaanNegatif
                - ketenangan
                - mulutKering
                - perasaanPositif
              properties:
                ketenangan:
                  $ref: '#/components/schemas/assessment/properties/ketenangan'
                mulutKering:
                  $ref: '#/components/schemas/assessment/properties/mulutKering'
                perasaanPositif:
                  $ref: '#/components/schemas/assessment/properties/perasaanPositif'
                keluhanTambahan:
                  $ref: '#/components/schemas/assessment/properties/keluhanTambahan'
      responses:
        '200':
          description: Create assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assessment'
        '404':
          description: not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: not found
  /assessment/{assessmentId}:
    get:
      tags:
        - Assessment
      summary: Get assessment
      description: Gunakan methhod ini untuk melakukan get assessment.
      security:
        - bearerAuth: []
      parameters:
        - name: assessmentId
          in: path
          required: true
          description: ID assessment yang ingin diambil informasinya
          schema:
            type: string
      responses:
        '200':
          description: Get assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assessment'
  /history/{userId}:
    get:
      tags:
        - Riwayat
      summary: Get riwayat
      parameters:
        - name: userId
          in: path
          required: true
          description: userId yang ingin diambil informasinya
          schema:
            type: string
      description: Gunakan methhod ini untuk melakukan get riwayat.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get riwayat
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  error:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/assessment'
        '404':
          description: not found
          content:
            application/json:
              example:
                statusCode: 404
                error: true
                message: not found

components:
  schemas:
    user:
      type: object
      properties:
        userId:
          type: string
          example: yj5pc_LARC_AgK61
        name:
          type: string
          minLength: 2
          maxLength: 25
          example: Budi Ari
        gender:
          type: string
          enum:
            - male
            - female
          example: male
        birth:
          type: string
          format: date
          example: 2003-01-05
        email:
          type: string
          format: email
          example: qhY4o@example.com
        password:
          type: string
          minLength: 6
          maxLength: 15
          format: password
          example: password123
        createdAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
    assessment:
      type: object
      properties:
        id:
          type: string
          example: 123
        ketenangan:
          type: number
          minimum: 0
          maximum: 3
          example: 3
        mulutKering:
          type: number
          minimum: 0
          maximum: 3
          example: 0
        perasaanPositif:
          type: number
          minimum: 0
          maximum: 3
          example: 2
        keluhanTambahan:
          type: string
          example: "Saya merasa sulit akhir-akhir ini dan sering cemas tentang pekerjaan saya"
        hasil:
          type: object
          properties:
            depresi:
              type: number
              minimum: 0
              maximum: 100
              example: 10
            kecemasan:
              type: number
              minimum: 0
              maximum: 100
              example: 80
            stres:
              type: number
              minimum: 0
              maximum: 100
              example: 60
        date:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
    validationError:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: "Data validasi tidak sesuai."
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "name"
              message:
                type: string
                example: "Nama tidak boleh kosong."
